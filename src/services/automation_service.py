"""
Servi√ßo de automa√ß√£o do CRM
"""
from models.automation import AutomationRule, AutomationAction, EmailCampaign
from models.user import db
import uuid
from datetime import datetime

class AutomationEngine:
    """Engine de automa√ß√£o para executar regras e a√ß√µes"""
    
    @staticmethod
    def execute_rule(rule_id, tenant_id):
        """Executa uma regra de automa√ß√£o"""
        try:
            rule = AutomationRule.query.filter_by(id=rule_id, tenant_id=tenant_id).first()
            if not rule:
                return {'success': False, 'message': 'Regra n√£o encontrada'}
            
            if not rule.is_active:
                return {'success': False, 'message': 'Regra est√° inativa'}
            
            # Atualizar estat√≠sticas
            rule.execution_count += 1
            rule.last_executed_at = datetime.utcnow()
            
            try:
                # Simular execu√ß√£o da regra
                print(f"ü§ñ Executando regra de automa√ß√£o {rule_id}")
                
                rule.success_count += 1
                db.session.commit()
                
                return {'success': True, 'message': 'Regra executada com sucesso'}
                
            except Exception as e:
                rule.error_count += 1
                db.session.commit()
                return {'success': False, 'message': f'Erro na execu√ß√£o: {str(e)}'}
            
        except Exception as e:
            return {'success': False, 'message': f'Erro na execu√ß√£o da regra: {str(e)}'}
    
    @staticmethod
    def validate_conditions(conditions):
        """Valida condi√ß√µes de uma regra"""
        try:
            print(f"üîç Validando condi√ß√µes: {conditions}")
            
            # Valida√ß√£o b√°sica
            if not isinstance(conditions, dict):
                return {'valid': False, 'message': 'Condi√ß√µes devem ser um objeto'}
            
            return {'valid': True, 'message': 'Condi√ß√µes v√°lidas'}
            
        except Exception as e:
            return {'valid': False, 'message': f'Erro na valida√ß√£o: {str(e)}'}

class AutomationService:
    """Servi√ßo principal de automa√ß√£o"""
    
    @staticmethod
    def create_automation_rule(rule_data, tenant_id, user_id):
        """Cria uma nova regra de automa√ß√£o"""
        try:
            rule = AutomationRule(
                id=str(uuid.uuid4()),
                name=rule_data.get('name'),
                description=rule_data.get('description', ''),
                trigger_type=rule_data.get('trigger_type'),
                trigger_conditions=rule_data.get('trigger_conditions', {}),
                filters=rule_data.get('filters', {}),
                delay_minutes=rule_data.get('delay_minutes', 0),
                priority=rule_data.get('priority', 1),
                tenant_id=tenant_id,
                created_by=user_id
            )
            
            db.session.add(rule)
            db.session.commit()
            
            return {'success': True, 'message': 'Regra criada com sucesso', 'rule': rule.to_dict()}
            
        except Exception as e:
            db.session.rollback()
            return {'success': False, 'message': f'Erro ao criar regra: {str(e)}'}
    
    @staticmethod
    def get_automation_rules(tenant_id):
        """Obt√©m todas as regras de automa√ß√£o do tenant"""
        try:
            rules = AutomationRule.query.filter_by(tenant_id=tenant_id).all()
            return {'success': True, 'rules': [rule.to_dict() for rule in rules]}
            
        except Exception as e:
            return {'success': False, 'message': f'Erro ao obter regras: {str(e)}'}
    
    @staticmethod
    def update_automation_rule(rule_id, rule_data, tenant_id):
        """Atualiza uma regra de automa√ß√£o"""
        try:
            rule = AutomationRule.query.filter_by(id=rule_id, tenant_id=tenant_id).first()
            if not rule:
                return {'success': False, 'message': 'Regra n√£o encontrada'}
            
            # Atualizar campos
            if 'name' in rule_data:
                rule.name = rule_data['name']
            if 'description' in rule_data:
                rule.description = rule_data['description']
            if 'is_active' in rule_data:
                rule.is_active = rule_data['is_active']
            if 'trigger_conditions' in rule_data:
                rule.trigger_conditions = rule_data['trigger_conditions']
            if 'filters' in rule_data:
                rule.filters = rule_data['filters']
            if 'delay_minutes' in rule_data:
                rule.delay_minutes = rule_data['delay_minutes']
            if 'priority' in rule_data:
                rule.priority = rule_data['priority']
            
            rule.updated_at = datetime.utcnow()
            db.session.commit()
            
            return {'success': True, 'message': 'Regra atualizada com sucesso', 'rule': rule.to_dict()}
            
        except Exception as e:
            db.session.rollback()
            return {'success': False, 'message': f'Erro ao atualizar regra: {str(e)}'}
    
    @staticmethod
    def delete_automation_rule(rule_id, tenant_id):
        """Deleta uma regra de automa√ß√£o"""
        try:
            rule = AutomationRule.query.filter_by(id=rule_id, tenant_id=tenant_id).first()
            if not rule:
                return {'success': False, 'message': 'Regra n√£o encontrada'}
            
            db.session.delete(rule)
            db.session.commit()
            
            return {'success': True, 'message': 'Regra deletada com sucesso'}
            
        except Exception as e:
            db.session.rollback()
            return {'success': False, 'message': f'Erro ao deletar regra: {str(e)}'}

class CadenceService:
    """Servi√ßo para gerenciar cad√™ncias de email"""
    
    @staticmethod
    def create_cadence(cadence_data, tenant_id, user_id):
        """Cria uma nova cad√™ncia"""
        try:
            campaign = EmailCampaign(
                id=str(uuid.uuid4()),
                name=cadence_data.get('name'),
                description=cadence_data.get('description', ''),
                subject=cadence_data.get('subject', ''),
                content=cadence_data.get('content', ''),
                sender_name=cadence_data.get('sender_name', ''),
                sender_email=cadence_data.get('sender_email', ''),
                reply_to=cadence_data.get('reply_to', ''),
                track_opens=cadence_data.get('track_opens', True),
                track_clicks=cadence_data.get('track_clicks', True),
                tenant_id=tenant_id,
                created_by=user_id
            )
            
            db.session.add(campaign)
            db.session.commit()
            
            return {'success': True, 'message': 'Cad√™ncia criada com sucesso', 'campaign': campaign.to_dict()}
            
        except Exception as e:
            db.session.rollback()
            return {'success': False, 'message': f'Erro ao criar cad√™ncia: {str(e)}'}
    
    @staticmethod
    def execute_cadence(cadence_id, tenant_id):
        """Executa uma cad√™ncia"""
        try:
            campaign = EmailCampaign.query.filter_by(id=cadence_id, tenant_id=tenant_id).first()
            if not campaign:
                return {'success': False, 'message': 'Cad√™ncia n√£o encontrada'}
            
            if not campaign.is_active:
                return {'success': False, 'message': 'Cad√™ncia est√° inativa'}
            
            # Simular execu√ß√£o da cad√™ncia
            print(f"üöÄ Executando cad√™ncia {cadence_id}")
            
            # Atualizar estat√≠sticas
            campaign.sent_count += 1
            db.session.commit()
            
            return {'success': True, 'message': 'Cad√™ncia executada com sucesso'}
            
        except Exception as e:
            db.session.rollback()
            return {'success': False, 'message': f'Erro ao executar cad√™ncia: {str(e)}'}

